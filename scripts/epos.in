#!/usr/bin/env bash 
if [ $# -le 0 ]; then
    echo 
    echo  " syntax:  epos [-hepmc \$hepfile] [-root] [-cproot] [-q|-c] "
    echo  "            [-eee[e] \$e1 \$e2 \$e3] [-n \$n] \$filen [\$n]"
    echo  "            [-hepstd] [-s \$n] [-si \$n] [-sj \$n]"
    echo 
    exit 1
fi

# check if the following environement variables have been defined
if [ -z ${EPO4HQ} ]; then
    export EPO4HQ=${EPOS4HQ_ROOT}
    echo "For compatibility reason with older versions, EPO4HQ has to be defined by default as the EPOS source directory: " $EPO4HQ
fi

if [ -z ${DAT} ]; then
    # this directory is needed to retrieve the files README.md and VERSION.txt
    export DAT=${EPO4HQ}
    echo "DAT will be defined by default as: " $DAT
fi

if [ -z ${OPT} ]; then
    export OPT=${EPO4HQ}examples/
    echo "OPT will be defined by default as: " $OPT
    # create directory if needed, no error if existing
    mkdir -p ${OPT}
fi

if [ -z ${HTO} ]; then
    export HTO=${EPO4HQ}histo/
    echo "HTO will be defined by default as: " $HTO
    # create directory if needed, no error if existing
    mkdir -p ${HTO}
fi

if [ -z ${CHK} ]; then
    export CHK=${EPO4HQ}check/
    echo "CHK will be defined by default as: " $CHK
    # create directory if needed, no error if existing    
    mkdir -p ${CHK}
fi

SRC=${EPO4HQ}'src/'   
SRCEXT=${EPO4HQ}'srcext/'
CONF=${EPO4HQ}'config/'

if [ $OPT = './' ]; then 
    OPX=`pwd`/
else
    OPX=$OPT
fi

hepmc='no'
hepfile='z-HepMC'
root='no'
cproot='no'
scr='no'
ext=''
num='0'
prone=''
mi1='no'
mi5='no'
system="i"
ext1='-'
ext2='-'
ext3='-'
ext4='-'
tmp='-'
end=0
gefac=1
seed_j=`date  '+%N'`
seed_i=`date  '+%N'`
MTR="!"

while [ $end -eq 0 ];
do
   end=1
   case "$1"
   in
   -n) shift 
         num="$1"
         shift
         end=0
         ;;
   -hepstd) shift
	MTR=""
	end=0
	;;      
   -s) shift
	seed_i=$1
      seed_j=$1
	shift
	end=0
	;;
   -si) shift
	seed_i=$1
	shift
	end=0
	;;
   -sj) shift
        seed_j=$1
        shift
        end=0
        ;;
   -e1) shift 
         ext1="$1"
         shift
         end=0
         ;;
   -e2) shift 
         ext2="$1"
         shift
         end=0
         ;;
   -e3) shift 
         ext3="$1"
         shift
         end=0
         ;;
   -eeee) shift 
         ext1="$1"
         shift
         ext2="$1"
         shift
         ext3="$1"
         shift
         ext4="0"
         end=0
         ;;
   -eee) shift 
         ext1="$1"
         shift
         ext2="$1"
         shift
         ext3="$1"
         shift
         end=0
         ;;
   -ee) shift 
         ext1="$1"
         shift
         ext2="$1"
         shift
         end=0
         ;;
   -hepmc)  shift 
         hepmc="yes"
         if [ ! -z "$1" ] && [ $# -gt 1 ]; then 
            hepfile="$1"
            shift
         fi   
         end=0
         ;;   
   -root)  shift 
         root="yes"
         end=0
         ;;
   -gf) shift 
         gefac=$1
         shift
         end=0
         ;;
   -cproot)  shift  
         cproot="yes"
         end=0   
         ;;   
   -scr)  shift  
         system="-q"
         end=0   
         ;;   
   -q)  shift  
         system="-q"
         end=0   
         ;;   
   -c)  shift  
         system="-c"
         end=0   
         ;;   
   -1)  shift  
         mi1="yes"
         end=0   
         ;;   
   -5)  shift  
         mi5="yes"
         end=0   
         ;;   
   esac
done

filei=$1

shift  
if [ $# -gt 0 ]; then
    num="$1"
fi


file=$filei
if [ ! "$ext1" = "-" ]; then
file=$file$ext1
fi
if [ ! "$ext2" = "-" ]; then
file=$file$ext2
fi
if [ ! "$ext3" = "-" ]; then
file=$file$ext3
fi
if  [ ! "$file" = "$filei" ]; then
echo cp $filei.optns $file.optns
     cp $filei.optns $file.optns
     tmp=$file.optns
fi

if [ ! -f ${OPX}${file}.optns ]; then
echo ${OPX}${file}.optns "does not exist"
exit
fi

rootcproot=$root$cproot

one=${file}
if [ "$num" != "0" ]; then
  one=${file}"-"${num}
fi
cp ${OPX}${file}.optns ${OPX}z-${one}.optns

rm -f ${CHK}z-${one}.check 
rm -f ${CHK}z-${one}.data
rm -f ${CHK}z-${one}.copy 
rm -f ${CHK}z-${one}.copyDo1 
rm -f ${CHK}z-${one}.copyDo2 
rm -f ${CHK}z-${one}.log 

gunzip -c ${SRC}KWt/eos4f.eos.gz > z-eos4f.eos

seedj=$seed_j
seedi=$seed_i    

#---------------------------------------------------------------------
clinput=z-${one}'.clinput'
 echo "${MTR}fname mtr ${CHK}z-${one}.mtr" > $clinput
 echo "set seedj $seedj  set seedi $seedi" >> $clinput
 echo "echo off" >> $clinput
 echo "rootcproot $rootcproot" >> $clinput
 echo "system $system" >> $clinput
 echo "ext1 $ext1" >> $clinput
 echo "ext3 $ext3" >> $clinput
 echo "ext4 $ext4" >> $clinput
 echo "set gefac $gefac" >> $clinput
 echo "!!!beginoptns spherio !No longer used." >> $clinput
 echo "!!!...                !See version < 3118  " >> $clinput
 echo "!!!endoptns spherio   !if needed again         " >> $clinput
 echo "fname pathep $EPO4HQ" >> $clinput
 echo "!-------HQ--------" >> $clinput
 echo "fname user1  ${SRCEXT}HQt/" >> $clinput
 echo "fname user2  ${HTO}z-${one}.hq" >> $clinput
 echo "fname user3  ${SRCEXT}URt/" >> $clinput
 echo "!-------HQ END--------" >> $clinput
 echo "fname pathpdf ${SRC}TPt/" >> $clinput
 echo "fname histo  ${HTO}z-${one}.histo" >> $clinput
 echo "fname check  ${CHK}z-${one}.check" >> $clinput
 echo "fname copy   ${CHK}z-${one}.copy" >> $clinput
 echo "fname log    ${CHK}z-${one}.log" >> $clinput
 echo "fname data   ${CHK}z-${one}.data" >> $clinput
 echo "fname hepfile ${hepfile}" >> $clinput
 echo "fname initl  ${SRC}KWt/aa.i" >> $clinput
 echo "fname inidi  ${SRC}TPt/di.i              " >> $clinput
 echo "fname inidr  ${SRC}KWt/dr.i              " >> $clinput
 echo "fname iniev  ${SRC}KWt/ev.i   " >> $clinput
 echo "fname inirj  ${SRC}KWt/rj.i" >> $clinput
 echo "fname inics  ${SRC}TPt/cs.i" >> $clinput
 echo "fname inigrv ${SRC}grv.i" >> $clinput
 echo "fname partab ${SRCEXT}YK/ptl6.data" >> $clinput
 echo "fname dectab ${SRCEXT}YK/dky6.data" >> $clinput
 echo "fname hpf    ${SRCEXT}UR/tables.dat" >> $clinput
 echo "!fqgsjet dat   ${SRC}qgsjet/qgsjet.dat !No longer used." >> $clinput
 echo "!fqgsjet ncs   ${SRC}qgsjet/qgsjet.ncs !No longer used." >> $clinput
 echo "!fqgsjetII dat   ${SRC}qgsjetII/qgsdat-II-03 !No longer used." >> $clinput
 echo "!fqgsjetII ncs   ${SRC}qgsjetII/sectnu-II-03 !No longer used." >> $clinput
 echo "nodecay 1220" >> $clinput
 echo "nodecay -1220" >> $clinput
 echo "nodecay 120" >> $clinput
 echo "nodecay -120" >> $clinput
 echo "nodecay 130" >> $clinput
 echo "nodecay -130" >> $clinput
 echo "nodecay -20" >> $clinput
 echo "nodecay 14" >> $clinput
 echo "nodecay -14" >> $clinput
 echo "nodecay 16" >> $clinput
 echo "nodecay -16" >> $clinput
 echo "echo on" >> $clinput
 echo "input  ${CONF}parbf.i" >> $clinput
 echo "input ${OPX}z-${one}.optns" >> $clinput
 echo "input  ${SRC}KWn/paraf.i" >> $clinput
 echo "input  ${CONF}partx.i" >> $clinput
 echo "runprogram" >> $clinput
 echo "stopprogram" >> $clinput
# to use gdb, type "epos ..." as usually, then in gdb type "run", then "z-clinput"  
#gdb ${OBJ}epos$EPOVSN/bin/Xepos 

time  ${EPO4HQ}bin/Xepos -n <<EOF
$clinput
EOF
rm $clinput
if [ -s ${CHK}z-${one}.data ]; then
  echo "###############################################################"
  echo "      output written to ${CHK}z-${one}.data"
  echo "###############################################################"
else
  rm -f ${CHK}z-${one}.data
fi 
rm -f ${CHK}z-${one}.dump
if [ "$root" = "no" ]; then 
rm -f ${CHK}z-${one}.root
fi
if [ ! -s ${CHK}z-${one}.check ]; then
  rm -f ${CHK}z-${one}.check
fi
if [ ! -s ${HTO}z-${one}.histo ]; then
  rm -f ${HTO}z-${one}.histo
fi
if [ ! -s ${HTO}z-${one}.hq ]; then
  rm -f ${HTO}z-${one}.hq
fi
if [ ! -s ${hepfile}.hepmc ]; then
  rm -f ${hepfile}.hepmc
fi
if [ ! -s $hepfile ]; then
  rm -f ${hepfile}
fi  
if [ -s ${hepfile}.hepmc ]; then
 if [ "$hepmc" = "no" ]; then 
  rm -f ${hepfile}.hepmc
 fi
fi
if [ -f ${OPX}fort.50 ]; then
  rm -f ${OPX}fort.50
fi
if [ -f ${OPX}fort.95 ]; then
  rm -f ${OPX}fort.95
fi
if [ -f ${OPX}idum_init.var ]; then
  rm -f ${OPX}idum_init.var
fi

rm -f ${OPX}z-${one}.optns
rm -f ${CHK}z-${one}.log
rm -f ${CHK}z-${one}.copy
rm -f ${CHK}z-${one}.copyDo1
rm -f ${CHK}z-${one}.copyDo2
rm -f ${HTO}z-${one}.ztr
rm -f ${CHK}z-${one}.dataR

rm -f z-eos4f.eos

if [ ! "$tmp" = "-" ]; then
rm -v $tmp 
fi

if [ -s ${CHK}z-${one}.see ]; then
rm -f ${CHK}z-${one}.see
fi
if [ "$cproot" = "yes" ]; then
rm -f ${OPX}z-${one}.optns
fi
if [ "$2" = "y-" ]; then
rm -f ${OPX}z-${one}.optns
fi
rm -f gmon.out
date
exit
